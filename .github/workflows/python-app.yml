name: Python应用测试与部署

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每周一凌晨3点运行一次，确保依赖更新后仍能正常运行
    - cron: '0 3 * * 1'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: 设置Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: 代码风格检查
      run: |
        # 停止构建，如果Python语法错误或未定义名称
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 仅作为警告的退出0的所有Python风格问题
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 创建测试目录
      run: |
        mkdir -p uploads

    - name: 运行测试
      run: |
        pytest --cov=. --cov-report=xml
    
    - name: 上传覆盖率报告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: 检查安全漏洞
      run: |
        pip install safety
        safety check

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    # 缓存Docker层，加速构建
    - name: 设置Docker缓存
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: 构建Docker镜像
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true
        tags: picui:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
    
    - name: 测试Docker镜像
      run: |
        docker run -d -p 8000:8000 --name picui-test picui
        sleep 5
        # 尝试访问健康检查接口
        curl -s http://localhost:8000/health || echo "健康检查接口不存在，检查主页"
        # 备选：检查主页是否可访问
        curl -s http://localhost:8000 | grep "PicUI" || echo "主页访问失败"
    
    - name: 清理Docker资源
      if: always()
      run: |
        docker stop picui-test || true
        docker rm picui-test || true
        
    # 变更缓存以避免缓存无限增长
    - name: 更新Docker缓存
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        
  deploy:
    needs: build
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 安装部署工具
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    
    - name: 获取版本信息
      id: get_version
      run: |
        if [ -f "VERSION" ]; then
          VERSION=$(cat VERSION)
        elif [ -f "src/__init__.py" ]; then
          VERSION=$(grep -oP '__version__ = "\K[^"]+' src/__init__.py || echo "0.1.0")
        else
          VERSION="0.1.0"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "构建版本: $VERSION"
    
    - name: 打包应用
      run: |
        if [ -f "setup.py" ]; then
          python setup.py sdist bdist_wheel
        else
          echo "未找到setup.py，使用替代打包方法"
          mkdir -p dist
          zip -r dist/picui-${{ steps.get_version.outputs.version }}.zip . -x "*.git*" ".github/*" ".venv/*"
        fi
    
    # 可选：登录到Docker Hub并推送镜像
    - name: 登录到Docker Hub
      if: ${{ github.repository_owner == 'laozig' }}
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 构建并推送Docker镜像
      if: ${{ github.repository_owner == 'laozig' }}
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/picui:latest
          ${{ secrets.DOCKER_USERNAME }}/picui:${{ steps.get_version.outputs.version }}
          
    # 部署到服务器的示例
    - name: 部署到服务器
      if: ${{ github.repository_owner == 'laozig' }}
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_KEY }}
        passphrase: ${{ secrets.SERVER_PASSPHRASE }}
        script: |
          cd /opt/picui
          git pull
          docker-compose pull
          docker-compose down
          docker-compose up -d
          # 简单健康检查
          sleep 10
          curl -s http://localhost:8000/health || echo "服务可能未正常启动"
          
    # 可选：发布到PyPI
    - name: 发布到PyPI
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ -f "setup.py" ]; then
          twine upload dist/*
        fi
        
    # 部署完成通知
    - name: 发送部署状态通知
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_TITLE: PicUI部署状态
        SLACK_MESSAGE: ":rocket: PicUI v${{ steps.get_version.outputs.version }} 部署${{ job.status == 'success' && '成功' || '失败' }}！"
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }} 